{
  "success": true,
  "fixed_code": "def shortest_paths(source, weight_by_edge):\n    weight_by_node = {\n        v: float('inf') for u, v in weight_by_edge\n    }\n    weight_by_node[source] = 0\n\n    for i in range(len(weight_by_node) - 1):\n        for (u, v), weight in weight_by_edge.items():\n            weight_by_node[v] = min(\n                weight_by_node[v],\n                weight_by_node[u] + weight\n            )\n\n    return weight_by_node\n \n\n\"\"\"\nMinimum-Weight Paths\nbellman-ford\n\nBellman-Ford algorithm implementation\n\nGiven a directed graph that may contain negative edges (as long as there are no negative-weight cycles), efficiently calculates the minimum path weights from a source node to every other node in the graph.\n\nInput:\n    source: A node id\n    weight_by_edge: A dict containing edge weights keyed by an ordered pair of node ids\n\nPrecondition:\n    The input graph contains no negative-weight cycles\n\nOutput:\n   A dict mapping each node id to the minimum weight of a path from the source node to that node\n\nExample:\n    >>> shortest_paths('A', {\n        ('A', 'B'): 3,\n        ('A', 'C'): 3,\n        ('A', 'F'): 5,\n        ('C', 'B'): -2,\n        ('C', 'D'): 7,\n        ('C', 'E'): 4,\n        ('D', 'E'): -5,\n        ('E', 'F'): -1\n    })\n    {'A': 0, 'C': 3, 'B': 1, 'E': 5, 'D': 10, 'F': 4}\n\"\"\"",
  "original_response": "```python\n\ndef shortest_paths(source, weight_by_edge):\n    weight_by_node = {\n        v: float('inf') for u, v in weight_by_edge\n    }\n    weight_by_node[source] = 0\n\n    for i in range(len(weight_by_node) - 1):\n        for (u, v), weight in weight_by_edge.items():\n            weight_by_node[v] = min(\n                weight_by_node[v],\n                weight_by_node[u] + weight\n            )\n\n    return weight_by_node\n \n\n\"\"\"\nMinimum-Weight Paths\nbellman-ford\n\nBellman-Ford algorithm implementation\n\nGiven a directed graph that may contain negative edges (as long as there are no negative-weight cycles), efficiently calculates the minimum path weights from a source node to every other node in the graph.\n\nInput:\n    source: A node id\n    weight_by_edge: A dict containing edge weights keyed by an ordered pair of node ids\n\nPrecondition:\n    The input graph contains no negative-weight cycles\n\nOutput:\n   A dict mapping each node id to the minimum weight of a path from the source node to that node\n\nExample:\n    >>> shortest_paths('A', {\n        ('A', 'B'): 3,\n        ('A', 'C'): 3,\n        ('A', 'F'): 5,\n        ('C', 'B'): -2,\n        ('C', 'D'): 7,\n        ('C', 'E'): 4,\n        ('D', 'E'): -5,\n        ('E', 'F'): -1\n    })\n    {'A': 0, 'C': 3, 'B': 1, 'E': 5, 'D': 10, 'F': 4}\n\"\"\"\n\n```\n",
  "agent": "Code Repair Agent",
  "algorithm": "shortest_paths"
}