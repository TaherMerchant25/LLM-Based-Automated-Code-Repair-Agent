{
  "success": true,
  "fixed_code": "def pascal(n):\n    rows = [[1]]\n    for r in range(1, n):\n        row = []\n        for c in range(0, r):\n            upleft = rows[r - 1][c - 1] if c > 0 else rows[r-1][0]\n            upright = rows[r - 1][c] if c < r else 0\n            row.append(upleft + upright)\n        rows.append(row)\n\n    return rows\n\n\n\"\"\"\nPascal's Triangle\npascal\n \n\n\nInput:\n    n: The number of rows to return\n\nPrecondition:\n    n >= 1\n\nOutput:\n    The first n rows of Pascal's triangle as a list of n lists\n\nExample:\n    >>> pascal(5)\n    [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n\"\"\"",
  "original_response": "```python\n\ndef pascal(n):\n    rows = [[1]]\n    for r in range(1, n):\n        row = []\n        for c in range(0, r):\n            upleft = rows[r - 1][c - 1] if c > 0 else rows[r-1][0]\n            upright = rows[r - 1][c] if c < r else 0\n            row.append(upleft + upright)\n        rows.append(row)\n\n    return rows\n\n\n\"\"\"\nPascal's Triangle\npascal\n \n\n\nInput:\n    n: The number of rows to return\n\nPrecondition:\n    n >= 1\n\nOutput:\n    The first n rows of Pascal's triangle as a list of n lists\n\nExample:\n    >>> pascal(5)\n    [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n\"\"\"\n\n```\n",
  "agent": "Code Repair Agent",
  "algorithm": "pascal"
}